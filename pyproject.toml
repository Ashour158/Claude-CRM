[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "claude-crm"
version = "0.1.0"
description = "A comprehensive multi-tenant CRM system"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}

[tool.ruff]
# Ruff configuration for linting and formatting
line-length = 100
target-version = "py311"

# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "DJ",  # flake8-django
    "I",   # isort
    "N",   # pep8-naming
    "S",   # flake8-bandit (security)
]

# Ignore specific rules that may conflict with Django patterns
ignore = [
    "DJ001",  # Avoid using null=True on string-based fields
    "S101",   # Use of assert detected (needed for tests)
    "S105",   # Possible hardcoded password (false positives in tests)
    "S106",   # Possible hardcoded password (false positives)
    "B008",   # Do not perform function calls in argument defaults (Django uses this)
]

# Exclude patterns
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "*/migrations/*",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.per-file-ignores]
# Allow certain violations in test files
"tests/*" = ["S101", "S105", "S106"]
"*/tests/*" = ["S101", "S105", "S106"]
"test_*.py" = ["S101", "S105", "S106"]
"conftest.py" = ["S101"]

[tool.ruff.isort]
known-first-party = ["core", "crm", "activities", "deals", "products", "sales", "territories", "vendors", "analytics", "marketing", "system_config", "integrations", "master_data", "workflow"]
known-third-party = ["django", "rest_framework"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.mccabe]
# Max complexity for functions
max-complexity = 10

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cov=.",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=0",  # Start with 0, increase gradually
    "--junitxml=test-results.xml",
    "--maxfail=5",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "smoke: marks tests as smoke tests",
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::django.utils.deprecation.RemovedInDjango50Warning",
    "ignore::django.utils.deprecation.RemovedInDjango51Warning",
    "ignore::PendingDeprecationWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/__pycache__/*",
    "*/conftest.py",
    "setup.py",
    "manage.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
