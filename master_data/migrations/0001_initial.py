# Generated by Django 4.2.7 on 2025-10-06 20:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("core", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="DataQualityRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("completeness", "Completeness"),
                            ("accuracy", "Accuracy"),
                            ("consistency", "Consistency"),
                            ("uniqueness", "Uniqueness"),
                            ("validity", "Validity"),
                            ("timeliness", "Timeliness"),
                        ],
                        default="validity",
                        max_length=20,
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "entity_type",
                    models.CharField(
                        help_text="Entity type this rule applies to", max_length=100
                    ),
                ),
                (
                    "field_name",
                    models.CharField(
                        blank=True,
                        help_text="Field name this rule applies to",
                        max_length=100,
                    ),
                ),
                ("condition", models.TextField(help_text="Rule condition/expression")),
                (
                    "error_message",
                    models.TextField(help_text="Error message when rule fails"),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_global",
                    models.BooleanField(
                        default=False, help_text="Apply to all companies"
                    ),
                ),
                ("execution_count", models.IntegerField(default=0)),
                ("violation_count", models.IntegerField(default=0)),
                ("last_executed", models.DateTimeField(blank=True, null=True)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_set",
                        to="core.company",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="owned_data_quality_rules",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "data_quality_rule",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DataSynchronization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "sync_type",
                    models.CharField(
                        choices=[
                            ("import", "Import"),
                            ("export", "Export"),
                            ("bidirectional", "Bidirectional"),
                        ],
                        default="import",
                        max_length=20,
                    ),
                ),
                ("source_system", models.CharField(max_length=100)),
                ("target_system", models.CharField(max_length=100)),
                (
                    "source_config",
                    models.JSONField(
                        default=dict, help_text="Source system configuration"
                    ),
                ),
                (
                    "target_config",
                    models.JSONField(
                        default=dict, help_text="Target system configuration"
                    ),
                ),
                (
                    "entity_type",
                    models.CharField(help_text="Entity type to sync", max_length=100),
                ),
                (
                    "field_mapping",
                    models.JSONField(
                        default=dict, help_text="Field mapping between systems"
                    ),
                ),
                (
                    "sync_filters",
                    models.JSONField(default=dict, help_text="Filters for sync data"),
                ),
                ("is_scheduled", models.BooleanField(default=False)),
                (
                    "schedule_frequency",
                    models.CharField(
                        choices=[
                            ("manual", "Manual"),
                            ("hourly", "Hourly"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                        ],
                        default="manual",
                        max_length=20,
                    ),
                ),
                ("schedule_time", models.TimeField(blank=True, null=True)),
                ("next_sync", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("total_records", models.IntegerField(default=0)),
                ("synced_records", models.IntegerField(default=0)),
                ("failed_records", models.IntegerField(default=0)),
                ("last_sync", models.DateTimeField(blank=True, null=True)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_set",
                        to="core.company",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="owned_data_synchronizations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "data_synchronization",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DataQualityViolation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("entity_type", models.CharField(max_length=100)),
                ("entity_id", models.CharField(max_length=100)),
                ("field_name", models.CharField(blank=True, max_length=100)),
                ("current_value", models.TextField(blank=True)),
                ("expected_value", models.TextField(blank=True)),
                ("violation_message", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("in_progress", "In Progress"),
                            ("resolved", "Resolved"),
                            ("ignored", "Ignored"),
                        ],
                        default="open",
                        max_length=20,
                    ),
                ),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("resolution_notes", models.TextField(blank=True)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_set",
                        to="core.company",
                    ),
                ),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_violations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="violations",
                        to="master_data.dataqualityrule",
                    ),
                ),
            ],
            options={
                "db_table": "data_quality_violation",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DataImport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "import_type",
                    models.CharField(
                        choices=[
                            ("csv", "CSV"),
                            ("excel", "Excel"),
                            ("json", "JSON"),
                            ("xml", "XML"),
                            ("api", "API"),
                            ("database", "Database"),
                        ],
                        default="csv",
                        max_length=20,
                    ),
                ),
                (
                    "source_file",
                    models.FileField(blank=True, null=True, upload_to="imports/"),
                ),
                ("source_url", models.URLField(blank=True)),
                (
                    "source_config",
                    models.JSONField(default=dict, help_text="Source configuration"),
                ),
                (
                    "target_entity",
                    models.CharField(help_text="Target entity type", max_length=100),
                ),
                (
                    "field_mapping",
                    models.JSONField(
                        default=dict, help_text="Field mapping configuration"
                    ),
                ),
                (
                    "import_rules",
                    models.JSONField(
                        default=dict, help_text="Import rules and transformations"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("total_records", models.IntegerField(default=0)),
                ("imported_records", models.IntegerField(default=0)),
                ("failed_records", models.IntegerField(default=0)),
                ("skipped_records", models.IntegerField(default=0)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_set",
                        to="core.company",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="owned_data_imports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "data_import",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DataExport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "export_type",
                    models.CharField(
                        choices=[
                            ("csv", "CSV"),
                            ("excel", "Excel"),
                            ("json", "JSON"),
                            ("xml", "XML"),
                            ("pdf", "PDF"),
                        ],
                        default="csv",
                        max_length=20,
                    ),
                ),
                (
                    "source_entity",
                    models.CharField(help_text="Source entity type", max_length=100),
                ),
                (
                    "source_filters",
                    models.JSONField(default=dict, help_text="Source filters"),
                ),
                (
                    "source_fields",
                    models.JSONField(default=list, help_text="Fields to export"),
                ),
                (
                    "export_format",
                    models.JSONField(
                        default=dict, help_text="Export format configuration"
                    ),
                ),
                (
                    "export_rules",
                    models.JSONField(
                        default=dict, help_text="Export rules and transformations"
                    ),
                ),
                (
                    "output_file",
                    models.FileField(blank=True, null=True, upload_to="exports/"),
                ),
                ("output_url", models.URLField(blank=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("total_records", models.IntegerField(default=0)),
                ("exported_records", models.IntegerField(default=0)),
                ("failed_records", models.IntegerField(default=0)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_set",
                        to="core.company",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="owned_data_exports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "data_export",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DataCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_set",
                        to="core.company",
                    ),
                ),
                (
                    "parent_category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subcategories",
                        to="master_data.datacategory",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Data Categories",
                "db_table": "data_category",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="MasterDataField",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("label", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "field_type",
                    models.CharField(
                        choices=[
                            ("text", "Text"),
                            ("number", "Number"),
                            ("date", "Date"),
                            ("boolean", "Boolean"),
                            ("choice", "Choice"),
                            ("multichoice", "Multi Choice"),
                            ("reference", "Reference"),
                        ],
                        default="text",
                        max_length=20,
                    ),
                ),
                ("is_required", models.BooleanField(default=False)),
                ("is_unique", models.BooleanField(default=False)),
                ("default_value", models.TextField(blank=True)),
                (
                    "choices",
                    models.JSONField(
                        default=list, help_text="Choices for choice/multichoice fields"
                    ),
                ),
                (
                    "validation_rules",
                    models.JSONField(default=dict, help_text="Field validation rules"),
                ),
                (
                    "reference_model",
                    models.CharField(
                        blank=True,
                        help_text="Referenced model for reference fields",
                        max_length=100,
                    ),
                ),
                (
                    "reference_field",
                    models.CharField(
                        blank=True,
                        help_text="Referenced field for reference fields",
                        max_length=100,
                    ),
                ),
                ("display_order", models.IntegerField(default=0)),
                ("is_visible", models.BooleanField(default=True)),
                ("help_text", models.TextField(blank=True)),
                ("is_editable", models.BooleanField(default=True)),
                ("is_searchable", models.BooleanField(default=True)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_set",
                        to="core.company",
                    ),
                ),
            ],
            options={
                "db_table": "master_data_field",
                "ordering": ["display_order"],
                "unique_together": {("company", "name")},
            },
        ),
    ]
