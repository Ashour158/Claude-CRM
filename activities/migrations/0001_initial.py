# Generated by Django 4.2.7 on 2025-10-06 20:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("crm", "0001_initial"),
        ("core", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Activity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "activity_type",
                    models.CharField(
                        choices=[
                            ("call", "Phone Call"),
                            ("email", "Email"),
                            ("meeting", "Meeting"),
                            ("demo", "Demo"),
                            ("proposal", "Proposal"),
                            ("follow_up", "Follow Up"),
                            ("note", "Note"),
                            ("other", "Other"),
                        ],
                        help_text="Type of activity",
                        max_length=20,
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        help_text="Activity subject/title", max_length=255
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Activity description"),
                ),
                (
                    "activity_date",
                    models.DateTimeField(help_text="When the activity occurs"),
                ),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(
                        blank=True, help_text="Activity duration in minutes", null=True
                    ),
                ),
                (
                    "due_date",
                    models.DateTimeField(
                        blank=True, help_text="Due date for follow-up", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planned", "Planned"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="planned",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                (
                    "object_id",
                    models.UUIDField(
                        blank=True, help_text="ID of the related entity", null=True
                    ),
                ),
                (
                    "outcome",
                    models.TextField(blank=True, help_text="Activity outcome/result"),
                ),
                (
                    "next_action",
                    models.TextField(blank=True, help_text="Next action required"),
                ),
                (
                    "next_action_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the next action should be completed",
                        null=True,
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True, help_text="Meeting location", max_length=255
                    ),
                ),
                (
                    "is_online",
                    models.BooleanField(
                        default=False, help_text="Is this an online meeting?"
                    ),
                ),
                (
                    "meeting_url",
                    models.URLField(blank=True, help_text="Online meeting URL"),
                ),
                (
                    "reminder_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Reminder minutes before activity",
                        null=True,
                    ),
                ),
                (
                    "reminder_sent",
                    models.BooleanField(
                        default=False, help_text="Has reminder been sent?"
                    ),
                ),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "assigned_to",
                    models.ForeignKey(
                        help_text="User assigned to this activity",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_set",
                        to="core.company",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Type of related entity (Account, Contact, Deal, etc.)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "participants",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Users participating in this activity",
                        related_name="activity_participants",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True, related_name="activities", to="crm.tag"
                    ),
                ),
            ],
            options={
                "ordering": ["-activity_date"],
            },
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(help_text="Task title", max_length=255)),
                (
                    "description",
                    models.TextField(blank=True, help_text="Task description"),
                ),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("call", "Call"),
                            ("email", "Email"),
                            ("meeting", "Meeting"),
                            ("follow_up", "Follow Up"),
                            ("research", "Research"),
                            ("proposal", "Proposal"),
                            ("demo", "Demo"),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=20,
                    ),
                ),
                (
                    "due_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the task should be completed",
                        null=True,
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(
                        blank=True, help_text="When the task should start", null=True
                    ),
                ),
                (
                    "completed_date",
                    models.DateTimeField(
                        blank=True, help_text="When the task was completed", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("on_hold", "On Hold"),
                        ],
                        default="not_started",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                (
                    "progress_percentage",
                    models.PositiveIntegerField(
                        default=0, help_text="Task completion percentage (0-100)"
                    ),
                ),
                (
                    "estimated_hours",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Estimated hours to complete",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "actual_hours",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Actual hours spent",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "object_id",
                    models.UUIDField(
                        blank=True, help_text="ID of the related entity", null=True
                    ),
                ),
                (
                    "reminder_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Reminder minutes before due date",
                        null=True,
                    ),
                ),
                ("reminder_sent", models.BooleanField(default=False)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "assigned_to",
                    models.ForeignKey(
                        help_text="User assigned to this task",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_set",
                        to="core.company",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Type of related entity",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "depends_on",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Tasks this task depends on",
                        related_name="dependent_tasks",
                        to="activities.task",
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True, related_name="tasks", to="crm.tag"
                    ),
                ),
            ],
            options={
                "ordering": ["-due_date", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TaskComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("content", models.TextField(help_text="Comment content")),
                (
                    "is_private",
                    models.BooleanField(
                        default=False,
                        help_text="Is this comment private to the creator?",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_set",
                        to="core.company",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="activities.task",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(help_text="Event title", max_length=255)),
                (
                    "description",
                    models.TextField(blank=True, help_text="Event description"),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("meeting", "Meeting"),
                            ("appointment", "Appointment"),
                            ("demo", "Demo"),
                            ("presentation", "Presentation"),
                            ("training", "Training"),
                            ("conference", "Conference"),
                            ("other", "Other"),
                        ],
                        default="meeting",
                        max_length=20,
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(help_text="Event start date and time"),
                ),
                ("end_date", models.DateTimeField(help_text="Event end date and time")),
                (
                    "is_all_day",
                    models.BooleanField(
                        default=False, help_text="Is this an all-day event?"
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True, help_text="Event location", max_length=255
                    ),
                ),
                (
                    "is_online",
                    models.BooleanField(
                        default=False, help_text="Is this an online event?"
                    ),
                ),
                (
                    "meeting_url",
                    models.URLField(blank=True, help_text="Online meeting URL"),
                ),
                (
                    "object_id",
                    models.UUIDField(
                        blank=True, help_text="ID of the related entity", null=True
                    ),
                ),
                (
                    "is_recurring",
                    models.BooleanField(
                        default=False, help_text="Is this a recurring event?"
                    ),
                ),
                (
                    "recurrence_pattern",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("yearly", "Yearly"),
                        ],
                        help_text="Recurrence pattern",
                        max_length=20,
                    ),
                ),
                (
                    "recurrence_end_date",
                    models.DateTimeField(
                        blank=True, help_text="When recurrence ends", null=True
                    ),
                ),
                (
                    "reminder_minutes",
                    models.PositiveIntegerField(
                        blank=True, help_text="Reminder minutes before event", null=True
                    ),
                ),
                ("reminder_sent", models.BooleanField(default=False)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "attendees",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Event attendees",
                        related_name="attended_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_set",
                        to="core.company",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Type of related entity",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "organizer",
                    models.ForeignKey(
                        help_text="Event organizer",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="organized_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True, related_name="events", to="crm.tag"
                    ),
                ),
            ],
            options={
                "ordering": ["start_date"],
            },
        ),
        migrations.CreateModel(
            name="ActivityNote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("content", models.TextField(help_text="Note content")),
                (
                    "is_private",
                    models.BooleanField(
                        default=False, help_text="Is this note private to the creator?"
                    ),
                ),
                (
                    "activity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notes",
                        to="activities.activity",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_set",
                        to="core.company",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["company", "assigned_to"], name="activities__company_576880_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["company", "status"], name="activities__company_788cff_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["company", "priority"], name="activities__company_a1354d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["company", "due_date"], name="activities__company_57aecd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["company", "start_date"], name="activities__company_6d5462_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["company", "event_type"], name="activities__company_a8271d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["company", "organizer"], name="activities__company_4ab841_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="activity",
            index=models.Index(
                fields=["company", "activity_type"],
                name="activities__company_5984bc_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="activity",
            index=models.Index(
                fields=["company", "assigned_to"], name="activities__company_02d372_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="activity",
            index=models.Index(
                fields=["company", "activity_date"],
                name="activities__company_9e3df1_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="activity",
            index=models.Index(
                fields=["company", "status"], name="activities__company_917542_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="activity",
            index=models.Index(
                fields=["company", "priority"], name="activities__company_24028f_idx"
            ),
        ),
    ]
